# Save firms above the 90th percentile to CSV
write.csv(firms_10, file = "firms_top10.csv", row.names = FALSE)
# Detect firms above the 80th percentile of benchmark distribution
percentile_20_bench <- quantile(di_industry, 0.80)
firms_20 <- locations_industry[di_industry > percentile_20_bench, ]
# Save firms above the 80th percentile to CSV
write.csv(firms_20, file = "firms_top20.csv", row.names = FALSE)
# Detect firms above the 70th percentile of benchmark distribution
percentile_30_bench <- quantile(di_industry, 0.70)
firms_30 <- locations_industry[di_industry > percentile_30_bench, ]
# Save firms above the 80th percentile to CSV
write.csv(firms_30, file = "firms_top30.csv", row.names = FALSE)
library(gridExtra)
# Combine the plots into one image
combined_plot <- grid.arrange(p1, p2, p3)
library(gridExtra)
# Combine the plots into one image
combined_plot <- grid.arrange(p1, p3)
# Save the combined plot to a file
ggsave(plot = combined_plot, filename = "combined_plot.png", device = "png")
#dependencies
install.packages("readxl")
install.packages("dbmss")
install.packages("dplyr")
install.packages("oce")
install.packages("sp")
install.packages("rgdal")
install.packages("raster")
install.packages("sp")
install.packages("ggplot2")
install.packages("ggfortify")
install.packages(c("sf", "rnaturalearth", "rnaturalearthdata"))
#Function location
bilatDistance <- function(lo, la){ # gives correctly computed bilateral distancs in km
radj=6371
la <- 2 * pi * la/360
lo <- 2 * pi * lo/360
coslat <- cos(la)
sinlat <- sin(la)
dvect <- sinlat %o% sinlat + (coslat %o% coslat) * cos(-outer(lo,  lo, "-"))
dvect <- dvect[lower.tri(dvect)]
dvect <- ifelse(dvect > 1, 1, dvect)
dvect <- radj * acos(dvect)
return(dvect)
}
bilatDistance_new <- function(lo, la){
radj <- 6371
la_rad <- 2 * pi * la / 360
lo_rad <- 2 * pi * lo / 360
coslat <- cos(la_rad)
sinlat <- sin(la_rad)
# Calculate the differences in longitudes and convert to radians
dlon_rad <- outer(lo_rad, lo_rad, "-")
# Compute the Haversine formula
dvect <- sinlat %o% sinlat + (coslat %o% coslat) * cos(dlon_rad)
dvect <- dvect[lower.tri(dvect)]
dvect <- ifelse(dvect > 1, 1, dvect)
dvect <- radj * acos(dvect)
print(dvect)
return(dvect)
}
convertXY <- function(lon, lat) {
# Radius of the Earth in kilometers
R <- 6371
# Convert latitude and longitude to Cartesian coordinates
x <- R * cos(lat * pi / 180) * cos(lon * pi / 180)
y <- R * cos(lat * pi / 180) * sin(lon * pi / 180)
return(data.frame(x = x, y = y))
}
calcDi<- function(y,x, fun){
thresh=1 # min distance
dist=bilatDistance(y,x)# calculaution of bilateral distances according to McSpatial
dist[dist<thresh] <-thresh
Di=rep(0,length(y))
pos=1
i=1
for(i in 1:(length(Di)-1)){ # calculate Di vlaues
upTo=length(Di)-i # length of array
#print(paste("Von ",pos,"um",upTo, sep=" " ))
for(z in 1:upTo){ # different possible functions to play with --> use invert
if(fun=="invert" ){
val=1/(dist[pos]*(length(Di)-1));
}
if(fun=="expo"){
val=exp(-0.05*dist[pos])
val=val/(length(Di)-1)
}
Di[i]=Di[i]+val
mypos=i+z
Di[mypos]=Di[mypos]+val
# print(paste("Updaze bei",i,"und",mypos, sep=" " ))
#print(pos)
pos=pos+1
}
}
return (Di)
}
#####  Global Values  ###################################################################################################
# function is used to calculate global dispersion or concentration
# needs the calculated Di values of the observes industry and the benchmark
globalValues<- function (kdeObs, kdeBench){
#calculate the median value of Benchmark
meanIntegral=0
i=1
while (meanIntegral<0.5){
maxb=max(kdeBench$y[i],kdeBench$y[(i+1)])
d=abs(kdeBench$y[i]-kdeBench$y[(i+1)])
c=kdeBench$x[(i+1)]-kdeBench$x[i]
integral=maxb*c-(0.5*(c*d))
meanIntegral=meanIntegral+integral
i=i+1
}
myMean=kdeBench$x[i]
omega=0
theta=0
print(myMean)
for(i in 1:(length(kdeObs$y)-1)){
if(kdeObs$y[i]>kdeBench$y[i] && kdeObs$y[(i+1)]>kdeBench$y[(i+1)]){
maxbObs=max(kdeObs$y[i],kdeObs$y[(i+1)])
maxbBench=max(kdeBench$y[i],kdeBench$y[(i+1)])
dObs=abs(kdeObs$y[i]-kdeObs$y[(i+1)])
dBench=abs(kdeBench$y[i]-kdeBench$y[(i+1)])
c=kdeObs$x[(i+1)]-kdeObs$x[i]
integralObs=maxbObs*c-(0.5*(c*dObs))
integralBench=maxbBench*c-(0.5*(c*dBench))
integral=integralObs-integralBench
if(kdeBench$x[i]< myMean){#Dispersion
omega=omega+integral
}
else{#Concentration
theta=theta+integral
}
}
}
ergeb=objects();
ergeb$theta=theta
ergeb$omega=omega
ergeb$delta=theta-omega
ergeb$myMean=myMean
return (ergeb)
}
# Function to remove the last 3 digits after the decimal point
remove_last_three_digits <- function(x) {
# Convert the number to a string
x_str <- as.character(x)
# Find the position of the decimal point
decimal_pos <- regexpr("\\.", x_str)[1]
# Determine the cutoff position (3 digits after the decimal point)
cutoff_pos <- decimal_pos + 10
# Remove the characters after the cutoff position
truncated_str <- substr(x_str, 1, cutoff_pos)
# Convert back to numeric
truncated_val <- as.numeric(truncated_str)
return(truncated_val)
}
#load libraries
library(dplyr)
library("readxl")
library(oce)
library(sp)
library(dbmss)
library(ggplot2)
#loading data
locations_industry <- read_excel("data/industry.xlsx")
locations_bench <- read_excel("data/benchmark.xlsx")
# Add 'PointType' column to locations_industry
locations_industry <- locations_industry %>%
mutate(PointType = "INDUSTRY")
# Add 'PointType' column to locations_bench
locations_bench <- locations_bench %>%
mutate(PointType = "BENCH")
locations_industry$Lat <- as.numeric(locations_industry$Lat)
locations_industry$Lon <- as.numeric(locations_industry$Lon)
locations_bench$Lat <- as.numeric(locations_bench$Lat)
locations_bench$Lon <- as.numeric(locations_bench$Lon)
# Extract latitude and longitude values
industry_lat <- locations_industry$Lat
industry_lon <- locations_industry$Lon
bench_lat <- locations_bench$Lat
bench_lon <- locations_bench$Lon
is.numeric(industry_lat)
is.numeric(industry_lon)
is.numeric(bench_lat)
is.numeric(bench_lon)
#Convert to X and Y for later. X is lat and Y is Lon
xy_industry <- convertXY(industry_lon, industry_lat)
xy_bench <- convertXY(bench_lon, bench_lat)
str(locations_industry)
str(locations_bench)
#Prepare datasets for the next steps - create datasets with pointtype in the df etc.
# Combine the data frames by rows (bind_rows)
combined_df_lonlat <- bind_rows(select(locations_industry, Lat, Lon, PointType),
select(locations_bench, Lat, Lon, PointType))
# Rename columns 'Lat' to 'x' and 'Lon' to 'y'
combined_df <- combined_df_lonlat %>%
rename(x = Lat, y = Lon)
# Print the resulting data frame
print(combined_df)
xy_industry_df <- data.frame(xy_industry)
xy_bench_df <- data.frame(xy_bench)
# Add 'PointType' column to xy_industry
xy_industry_df <- xy_industry_df %>%
mutate(PointType = "INDUSTRY")
# Add 'PointType' column to bench
xy_bench_df <- xy_bench_df %>%
mutate(PointType = "BENCH")
# Combine the data frames by rows (bind_rows)
# Combine the selected columns by rows (bind_rows)
combined_df_xy <- bind_rows(select(xy_bench_df, x, y, PointType),
select(xy_industry_df, x, y, PointType))
# Display the combined data frame
print(combined_df_xy)
locations_industry <- read_excel("data/industry.xlsx")
locations_bench <- read_excel("data/benchmark.xlsx")
locations_industry$Lat <- as.numeric(locations_industry$Lat)
locations_industry$Lon <- as.numeric(locations_industry$Lon)
locations_bench$Lat <- as.numeric(locations_bench$Lat)
locations_bench$Lon <- as.numeric(locations_bench$Lon)
# Extract latitude and longitude values
industry_lat <- locations_industry$Lat
industry_lon <- locations_industry$Lon
bench_lat <- locations_bench$Lat
bench_lon <- locations_bench$Lon
# Calculate Di values
di_industry <- calcDi(industry_lon, industry_lat, fun = "expo")
di_bench <- calcDi(bench_lon, bench_lat, fun = "expo")
# Perform statistical tests
ks_test_result <- ks.test(di_industry, di_bench)
print(ks_test_result)
mann_whitney_result <- wilcox.test(di_industry, di_bench, alternative = "two.sided")
print(mann_whitney_result)
# Kernel Density Estimation and Comparison
library(stats)
industry_density <- density(di_industry, n = 500)
bench_density <- density(di_bench, n = 500)
# Set the file name and path for saving the image
file_name <- "density_plot.png"
file_path <- ""
# Combine file path and name
file <- paste0(file_path, file_name)
# Start recording the plot as a PNG file
png(file)
# Plot the densities
plot(bench_density, main = "Density of Di Values", xlab = "Di Values", ylab = "Density")
lines(industry_density, lty = 2)
legend("topright", legend = c("Bench", "Industry"), lty = c(1, 2), col = c("black", "black"))
# Close the PNG device
dev.off()
# Calculate global values and concentrations
result <- globalValues(industry_density, bench_density)
print(result)
# Create a data frame to include results in the table
results_table <- data.frame(
Statistic = c("KS Test Statistic", "KS Test p-value", "Mann-Whitney Test Statistic", "Mann-Whitney Test p-value",
"Global Values - Omega", "Global Values - Theta", "Global Values - Delta", "Global Values - MyMean"),
Value = c(ks_test_result$statistic, ks_test_result$p.value, mann_whitney_result$statistic, mann_whitney_result$p.value,
global_values_result$omega, global_values_result$theta, global_values_result$delta, global_values_result$myMean)
)
# Calculate global values and concentrations
global_values_result <- globalValues(industry_density, bench_density)
print(global_values_result)
# Create a data frame to include results in the table
results_table <- data.frame(
Statistic = c("KS Test Statistic", "KS Test p-value", "Mann-Whitney Test Statistic", "Mann-Whitney Test p-value",
"Global Values - Omega", "Global Values - Theta", "Global Values - Delta", "Global Values - MyMean"),
Value = c(ks_test_result$statistic, ks_test_result$p.value, mann_whitney_result$statistic, mann_whitney_result$p.value,
global_values_result$omega, global_values_result$theta, global_values_result$delta, global_values_result$myMean)
)
# Print the results table in a format suitable for thesis
kable(results_table, caption = "Statistical Test Results and Global Values Comparing Industry and Benchmark Di Values")
#load libraries
library(dplyr)
library("readxl")
library(oce)
library(sp)
library(dbmss)
library(ggplot2)
library(knitr)
# Create a data frame to include results in the table
results_table <- data.frame(
Statistic = c("KS Test Statistic", "KS Test p-value", "Mann-Whitney Test Statistic", "Mann-Whitney Test p-value",
"Global Values - Omega", "Global Values - Theta", "Global Values - Delta", "Global Values - MyMean"),
Value = c(ks_test_result$statistic, ks_test_result$p.value, mann_whitney_result$statistic, mann_whitney_result$p.value,
global_values_result$omega, global_values_result$theta, global_values_result$delta, global_values_result$myMean)
)
# Print the results table in a format suitable for thesis
kable(results_table, caption = "Statistical Test Results and Global Values Comparing Industry and Benchmark Di Values")
# Format numbers to 3 significant figures
format_number <- function(x) {
format(x, digits = 3, scientific = TRUE)
}
# Create a data frame to include results in the table
results_table <- data.frame(
Statistic = c("KS Test Statistic", "KS Test p-value", "Mann-Whitney Test Statistic", "Mann-Whitney Test p-value",
"Global Values - Omega", "Global Values - Theta", "Global Values - Delta", "Global Values - MyMean"),
Value = c(format_number(ks_test_result$statistic), format_number(ks_test_result$p.value),
format_number(mann_whitney_result$statistic), format_number(mann_whitney_result$p.value),
format_number(global_values_result$omega), format_number(global_values_result$theta),
format_number(global_values_result$delta), format_number(global_values_result$myMean))
)
# Print the results table in a format suitable for thesis
kable(results_table, caption = "Statistical Test Results and Global Values Comparing Industry and Benchmark Di Values", format = "html")
# Calculate global values and concentrations
global_values_result <- globalValues(industry_density, bench_density)
print(global_values_result)
# Format numbers to 3 significant figures
format_number <- function(x) {
format(x, digits = 3, scientific = TRUE)
}
# Create a data frame to include results in the table
results_table <- data.frame(
Statistic = c("KS Test Statistic", "KS Test p-value", "Mann-Whitney Test Statistic", "Mann-Whitney Test p-value",
"Global Values - Omega", "Global Values - Theta", "Global Values - Delta", "Global Values - MyMean"),
Value = c(format_number(ks_test_result$statistic), format_number(ks_test_result$p.value),
format_number(mann_whitney_result$statistic), format_number(mann_whitney_result$p.value),
format_number(global_values_result$omega), format_number(global_values_result$theta),
format_number(global_values_result$delta), format_number(global_values_result$myMean))
)
# Print the results table in a format suitable for thesis
kable(results_table, caption = "Statistical Test Results and Global Values Comparing Industry and Benchmark Di Values", format = "html")
# Create a data frame to include results in the table
results_table <- data.frame(
Statistic = c("KS Test Statistic", "KS Test p-value", "Mann-Whitney Test Statistic", "Mann-Whitney Test p-value",
"Global Values - Omega", "Global Values - Theta", "Global Values - Delta", "Global Values - MyMean"),
Value = c(format_number(ks_test_result$statistic), format_number(ks_test_result$p.value),
format_number(mann_whitney_result$statistic), format_number(mann_whitney_result$p.value),
format_number(global_values_result$omega), format_number(global_values_result$theta),
format_number(global_values_result$delta), format_number(global_values_result$myMean))
)
# Print the results table with lines in a format suitable for thesis
kable(results_table, caption = "Statistical Test Results and Global Values Comparing Industry and Benchmark Di Values", format = "html") %>%
kable_styling(full_width = F) %>%
add_header_above(c(" " = 1, "Results" = 1)) %>%
row_spec(0, bold = TRUE) %>%
column_spec(1, bold = TRUE) %>%
kableExtra::kable_styling(latex_options = c("hold_position"))
#load libraries
library(dplyr)
library("readxl")
library(oce)
library(sp)
library(dbmss)
library(ggplot2)
library(knitr)
library(kableExtra)
install.packages("kableExtra")
#load libraries
library(dplyr)
library("readxl")
library(oce)
library(sp)
library(dbmss)
library(ggplot2)
library(knitr)
library(kableExtra)
# Format numbers to 3 significant figures
format_number <- function(x) {
format(x, digits = 3, scientific = TRUE)
}
# Create a data frame to include results in the table
results_table <- data.frame(
Statistic = c("KS Test Statistic", "KS Test p-value", "Mann-Whitney Test Statistic", "Mann-Whitney Test p-value",
"Global Values - Omega", "Global Values - Theta", "Global Values - Delta", "Global Values - MyMean"),
Value = c(format_number(ks_test_result$statistic), format_number(ks_test_result$p.value),
format_number(mann_whitney_result$statistic), format_number(mann_whitney_result$p.value),
format_number(global_values_result$omega), format_number(global_values_result$theta),
format_number(global_values_result$delta), format_number(global_values_result$myMean))
)
# Print the results table with lines in a format suitable for thesis
kable(results_table, caption = "Statistical Test Results and Global Values Comparing Industry and Benchmark Di Values", format = "html") %>%
kable_styling(full_width = F) %>%
add_header_above(c(" " = 1, "Results" = 1)) %>%
row_spec(0, bold = TRUE) %>%
column_spec(1, bold = TRUE) %>%
kableExtra::kable_styling(latex_options = c("hold_position"))
# Create a data frame to include results in the table
results_table <- data.frame(
Statistic = c("KS Test Statistic", "KS Test p-value", "Mann-Whitney Test Statistic", "Mann-Whitney Test p-value",
"Global Values - Omega", "Global Values - Theta", "Global Values - Delta", "Global Values - MyMean"),
Value = c(format_number(ks_test_result$statistic), format_number(ks_test_result$p.value),
format_number(mann_whitney_result$statistic), format_number(mann_whitney_result$p.value),
format_number(global_values_result$omega), format_number(global_values_result$theta),
format_number(global_values_result$delta), format_number(global_values_result$myMean))
)
# Print the results table with lines in a format suitable for thesis
kable(results_table, caption = "Statistical Test Results and Global Values Comparing Industry and Benchmark Di Values", format = "html")
#load libraries
library(dplyr)
library("readxl")
library(oce)
library(sp)
library(dbmss)
library(ggplot2)
library(knitr)
library(kableExtra)
# Create a data frame to include results in the table
results_table <- data.frame(
Statistic = c("KS Test Statistic", "KS Test p-value", "Mann-Whitney Test Statistic", "Mann-Whitney Test p-value",
"Global Values - Omega", "Global Values - Theta", "Global Values - Delta", "Global Values - MyMean"),
Value = c(format_number(ks_test_result$statistic), format_number(ks_test_result$p.value),
format_number(mann_whitney_result$statistic), format_number(mann_whitney_result$p.value),
format_number(global_values_result$omega), format_number(global_values_result$theta),
format_number(global_values_result$delta), format_number(global_values_result$myMean))
)
# Print the results table with lines in a format suitable for thesis
kable(results_table, caption = "Statistical Test Results and Global Values Comparing Industry and Benchmark Di Values", format = "html")
# Create a data frame to include results in the table
results_table <- data.frame(
Statistic = c("KS Test Statistic", "KS Test p-value", "Mann-Whitney Test Statistic", "Mann-Whitney Test p-value",
"Global Values - Omega", "Global Values - Theta", "Global Values - Delta", "Global Values - MyMean"),
Value = c(format_number(ks_test_result$statistic), format_number(ks_test_result$p.value),
format_number(mann_whitney_result$statistic), format_number(mann_whitney_result$p.value),
format_number(global_values_result$omega), format_number(global_values_result$theta),
format_number(global_values_result$delta), format_number(global_values_result$myMean))
)
# Print the results table with lines in a format suitable for thesis
table_html <- kable(results_table, caption = "Statistical Test Results and Global Values Comparing Industry and Benchmark Di Values", format = "html") %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"), full_width = FALSE) %>%
column_spec(1, bold = TRUE) %>%
column_spec(2, color = "blue")
# Save the table as an HTML file
save_kable(table_html, file = "results_table.html")
install.packages("webshot")
webshot::install_phantomjs()
# Create a data frame to include results in the table
results_table <- data.frame(
Statistic = c("KS Test Statistic", "KS Test p-value", "Mann-Whitney Test Statistic", "Mann-Whitney Test p-value",
"Global Values - Omega", "Global Values - Theta", "Global Values - Delta", "Global Values - MyMean"),
Value = c(format_number(ks_test_result$statistic), format_number(ks_test_result$p.value),
format_number(mann_whitney_result$statistic), format_number(mann_whitney_result$p.value),
format_number(global_values_result$omega), format_number(global_values_result$theta),
format_number(global_values_result$delta), format_number(global_values_result$myMean))
)
# Print the results table with lines in a format suitable for thesis
table_html <- kable(results_table, caption = "Statistical Test Results and Global Values Comparing Industry and Benchmark Di Values", format = "html") %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"), full_width = FALSE) %>%
column_spec(1, bold = TRUE) %>%
column_spec(2, color = "blue")
# Save the table as an HTML file
save_kable(table_html, file = "results_table.html")
library(webshot)
# Create a data frame to include results in the table
results_table <- data.frame(
Statistic = c("KS Test Statistic", "KS Test p-value", "Mann-Whitney Test Statistic", "Mann-Whitney Test p-value",
"Global Values - Omega", "Global Values - Theta", "Global Values - Delta", "Global Values - MyMean"),
Value = c(format_number(ks_test_result$statistic), format_number(ks_test_result$p.value),
format_number(mann_whitney_result$statistic), format_number(mann_whitney_result$p.value),
format_number(global_values_result$omega), format_number(global_values_result$theta),
format_number(global_values_result$delta), format_number(global_values_result$myMean))
)
# Print the results table with lines in a format suitable for thesis
table_html <- kable(results_table, caption = "Statistical Test Results and Global Values Comparing Industry and Benchmark Di Values", format = "html") %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"), full_width = FALSE) %>%
column_spec(1, bold = TRUE) %>%
column_spec(2, color = "blue")
# Save the table as an HTML file first
save_kable(table_html, file = "results_table.html")
# Convert the HTML file to a PNG image
webshot("results_table.html", "results_table.png", selector = "table")
#load libraries
library(dplyr)
library("readxl")
library(oce)
library(sp)
library(dbmss)
library(ggplot2)
library(knitr)
library(kableExtra)
webshot::install_phantomjs()
library(webshot)
# Create a data frame to include results in the table
results_table <- data.frame(
Statistic = c("KS Test Statistic", "KS Test p-value", "Mann-Whitney Test Statistic", "Mann-Whitney Test p-value",
"Global Values - Omega", "Global Values - Theta", "Global Values - Delta", "Global Values - MyMean"),
Value = c(format_number(ks_test_result$statistic), format_number(ks_test_result$p.value),
format_number(mann_whitney_result$statistic), format_number(mann_whitney_result$p.value),
format_number(global_values_result$omega), format_number(global_values_result$theta),
format_number(global_values_result$delta), format_number(global_values_result$myMean))
)
# Print the results table with lines in a format suitable for thesis
table_html <- kable(results_table, caption = "Statistical Test Results and Global Values Comparing Industry and Benchmark Di Values", format = "html") %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"), full_width = TRUE, position = "left", font_size = 15) %>%
column_spec(1, bold = TRUE, border_right = TRUE) %>%
column_spec(2, color = "blue", border_left = TRUE) %>%
add_header_above(c(" " = 1, "Values" = 1)) %>%
kable_classic(full_width = TRUE, html_font = "Arial")
# Save the table as an HTML file first
save_kable(table_html, file = "results_table.html")
# Convert the HTML file to a PNG image
webshot("results_table.html", "results_table.png", selector = "table")
webshot::install_phantomjs()
library(webshot)
# Create a data frame to include results in the table
results_table <- data.frame(
Statistic = c("KS Test Statistic", "KS Test p-value", "Mann-Whitney Test Statistic", "Mann-Whitney Test p-value",
"Global Values - Omega", "Global Values - Theta", "Global Values - Delta", "Global Values - MyMean"),
Value = c(format_number(ks_test_result$statistic), format_number(ks_test_result$p.value),
format_number(mann_whitney_result$statistic), format_number(mann_whitney_result$p.value),
format_number(global_values_result$omega), format_number(global_values_result$theta),
format_number(global_values_result$delta), format_number(global_values_result$myMean))
)
# Print the results table with lines in a format suitable for thesis
table_html <- kable(results_table, caption = "Statistical Test Results and Global Values Comparing Industry and Benchmark Di Values", format = "html") %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"), full_width = TRUE, position = "left", font_size = 15) %>%
column_spec(1, bold = TRUE, border_right = TRUE) %>%
column_spec(2, color = "black", border_left = TRUE) %>%
add_header_above(c(" " = 1, "Values" = 1)) %>%
kable_classic(full_width = TRUE, html_font = "Arial")
# Save the table as an HTML file first
save_kable(table_html, file = "results_table.html")
# Convert the HTML file to a PNG image
webshot("results_table.html", "results_table.png", selector = "table")
